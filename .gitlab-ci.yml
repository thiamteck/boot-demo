stages:
  - build
  - release
  - publish

maven-build-stage:
  image: maven:3.8.7-eclipse-temurin-8-alpine
  stage: build
  script: 
    - echo GE_JOB_ID=$CI_JOB_ID >> generate_executables.env
    - mvn clean package
    - cd target && java -Djarmode=layertools -jar boot-demo-0.0.1-SNAPSHOT.jar
  artifacts:
    paths: 
      - target/boot-demo-0.0.1-SNAPSHOT.jar
    reports:
      # To ensure we've access to this file in the next stage
      dotenv: generate_executables.env  

release_job:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  rules:
    - if: '$CI_COMMIT_TAG'
  script:
    - echo 'Previous Job ID is printed below'
    - echo $GE_JOB_ID
  needs:
    - job: maven-build-stage
      artifacts: true
  release:
    name: 'Release Executables $CI_COMMIT_TAG'
    description: 'Release by release-cli'
    # tag_name is a mendatory field and can not be an empty string
    tag_name: '$CI_COMMIT_TAG'
    assets:
      links:
        - name: 'Executable'
          url: 'http://gitlab.unifiedcomms.com/thiamteck/boot-demo/-/jobs/${GE_JOB_ID}/artifacts/download?file_type=archive'
          
publish_job:
  stage: publish
  image: docker:20-dind
  services:
  - name: docker:20-dind
    alias: docker
    command: [ "--tls=false" ]
  needs: ["maven-build-stage"]
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
  script: 
    # - mvn clean package -Dmaven.test.skip=true 
    # cd target && java -Djarmode=layertools -jar boot-demo-0.0.1-SNAPSHOT.jar extract && cd ..
    - docker build -t boot-demo:1.0.0 . 
    - docker save -o boot-demo-1.0.0.tar boot-demo:1.0.0
  artifacts:
    paths: 
      - boot-demo-1.0.0.tar